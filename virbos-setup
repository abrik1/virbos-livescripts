#!/bin/sh
# virbos-setup: simple prompt-based installer for Virbos

set -e

[ -z "$VIRBOSSETUP_SHELL" ] && VIRBOSSETUP_SHELL="zsh"

writeln() {
	printf "$1\n"
}
ewriteln() {
	>&2 writeln "$1"
}
sgrep() {
	printf "$2" | grep -Eq "$1"
}
lower() {
	printf "$1" | tr '[:upper:]' '[:lower:]'
}

panic() {
	ewriteln "$(basename $0): $1"
	exit 1
}

invalidinput() {
	ewriteln "Invalid input '$1'."
	ewriteln "Press '?' for help."
	writeln
}

# ask takes 3 arguments:
# - the question
# - a comma-separated list of options
# - the default option
# The user's answer is stored in the
# $answer variable.
ask() {
	OLDIFS="$IFS"
	IFS=','
	while true; do
		read -p "$1 [$3] " answer
		if [ "$answer" = '?' ]; then
			writeln "Valid options:"
			for option in $2; do
				writeln " - $option"
			done
			continue
		fi
		# Check for ^D or Enter
		if [ -z "$answer" ]; then
			answer="$3"
			IFS="$OLDIFS"
			unset OLDIFS
			return 0
		fi
		# Check input against options
		for option in $2; do
			if [ "$(lower $answer)" = "$(lower $option)" ]; then
				IFS="$OLDIFS"
				unset OLDIFS
				answer="$(lower $answer)"
				return 0
			fi
		done
		# Invalid input
		invalidinput "$answer"
	done
}
# ask_customhelp takes 3 arguments:
# - the question
# - a comma-separated list of options
# - the default option
# - the command to run if the user requests help
# The user's answer is stored in the
# $answer variable.
ask_customhelp() {
	OLDIFS="$IFS"
	IFS=','
	while true; do
		read -p "$1 [$3] " answer
		if [ "$answer" = '?' ]; then
			eval $4
			continue
		fi
		# Check for ^D or Enter
		if [ -z "$answer" ]; then
			answer="$3"
			IFS="$OLDIFS"
			unset OLDIFS
			return 0
		fi
		# Check input against options
		for option in $2; do
			if [ "$(lower $answer)" = "$(lower $option)" ]; then
				IFS="$OLDIFS"
				unset OLDIFS
				answer="$(lower $answer)"
				return 0
			fi
		done
		# Invalid input
		invalidinput "$answer"
		writeln
	done
}
# ask_nodefault takes 2 arguments:
# - the question
# - a comma-separated list of options
# The user's answer is stored in the
# $answer variable.
ask_nodefault() {
	OLDIFS="$IFS"
	IFS=','
	while true; do
		read -p "$1 " answer
		if [ "$answer" = '?' ]; then
			writeln "Valid options:"
			for option in $2; do
				writeln " - $option"
			done
			continue
		fi
		# Check for ^D or Enter
		if [ -z "$answer" ]; then
			continue
		fi
		# Check input against options
		for option in $2; do
			if [ "$(lower $answer)" = "$(lower $option)" ]; then
				IFS="$OLDIFS"
				unset OLDIFS
				answer="$(lower $answer)"
				return 0
			fi
		done
		# Invalid input
		invalidinput "$answer"
	done
}
# ask_yn takes 2 arguments:
# - the question
# - the default option (either 'y' or 'n')
# The user's answer is stored in the
# $answer variable as 'y' or 'n'.
ask_yn () {
	while true; do
		read -p "$1 [$2] " answer
		if [ "$answer" = '?' ]; then
			writeln "Valid options:"
			writeln " yes, no"
			continue
		fi
		# Check for ^D or Enter
		if [ -z "$answer" ]; then
			answer="$2"
			return 0
		fi
		# Check input against options
		if sgrep "[Yy]([Ee][Ss])?" "$answer"; then
			answer='y'
			return 0
		elif sgrep "[Nn][Oo]?" "$answer"; then
			answer='n'
			return 0
		fi
	done
}

mesg() {
	writeln "\033[1;32m *\033[0;1m $1 \033[0m"
}

# Installer components #

testnetwork() {
	writeln "Checking Internet access..."
	if ping -c3 archlinux.org >/dev/null 2>/dev/null; then
		writeln "Connected to Internet."
		return 0
	fi
	ewriteln "Connection failed."
	return 1
}

getdisks() {
	lsblk | grep '^[a-z]'
}
getpartitions() {
	ls /dev/"$1"* | grep -Ev "$1"'$' | grep -Eo "$1.+"
}
disklist() {
	writeln "Name\tSize"
	getdisks | awk '{print $1, $4}'
}

getlayout() {
	ask_yn "Have you created all necessary partitions?" n
	if [ "$answer" = 'y' ]; then
		for partition in $(getpartitions "$disk"); do
			if [ -z "$partitions" ]; then
				partitions="$partition";
			else
				partitions="$partitions,$partition"
			fi
		done
		ask_yn "Do you want to install a bootloader?" y
		if [ "$answer" = 'y' ]; then
			ask_nodefault "What partition would you like to use for the bootloader?" "$partitions"
			partition_boot="$answer"
		fi
		ask_yn "Do you want to use a swap partition?" n
		if [ "$answer" = 'y' ]; then
			ask_nodefault "What partition would you like to use for swap space?" "$partitions"
			partition_swap="$answer"
		fi
		ask_nodefault "What partition would you like to use for the operating system?" "$partitions"
		partition_data="$answer"
	elif [ "$answer" = 'n' ]; then
		writeln "Retrying in 3 seconds..."
		sleep 3
		return 1
	fi
	return 0
}

define_partitions(){
	writeln "Formatting ${partition_data} as ext4"
	mkfs.ext4 ${partition_data}
	writeln "Formatting ${partition_swap} as swap"
	mkswap ${partition_swap}
	writeln "Formatting ${partition_boot} as FAT32"
	mkfs.fat -F32 ${partition_boot}
}

mount_partitions(){
	writeln "Mounting ${partition_data} as /mnt"
	mount ${partition_data} /mnt
	writeln "Mounting ${partition_boot} as /mnt/boot"
	mkdir /mnt/boot
	mount ${partition_boot} /mnt/boot
	writeln "Enabling swap on ${partition_swap}"
	swapon ${partition_swap}
}

partition_tui() {
	writeln "Please make sure not to do anything destructive."
	writeln "Resizing or moving partitions is usually not a good idea."
	writeln
	writeln "Make sure to create a partition for the bootloader (recommended size 1 GB),"
	writeln "a partition for the operating system (recommended size >50 GB),"
	writeln "and optionally a swap partition."
	writeln "Press Enter to enter the TUI."
	read x
	while true; do
		cfdisk /dev/"$disk"
		if getlayout; then
			break
		else
			continue
		fi
	done
}

partition_shell() {
	writeln "Lead the way, captain!"
	while true; do
		$VIRBOSSETUP_SHELL || true
		if getlayout; then
			break
		else
			continue
		fi
	done
}

# setup routines #

setup_keymaps() {
	writeln
	for km in $(localectl --no-pager list-keymaps); do
		[ -z "$keymaps" ] && keymaps="$km"
		[ -z "$keymaps" ] || keymaps="$keymaps,$km"
	done
	ask_customhelp "What keymap would you like to use?" "$keymaps" us "localectl --no-pager list-keymaps | less -E"
	keymap="$answer"
	mesg "Keymap configured."
}

setup_tzone() {
	writeln
	for tz in $(timedatectl --no-pager list-timezones); do
		[ -z "$timezones" ] && timezones="$tz"
		[ -z "$timezones" ] || timezones="$timezones,$tz"
	done
	ask_customhelp "What is your timezone?" "$timezones" "Europe/Kyiv" "timedatectl --no-pager list-timezones | less -E"
	timezone="$answer"
	mesg "Timezone configured."
}

setup_network() {
	writeln
	read -p "Enter a system hostname: [virbos] " hostname
	if [ -z "$hostname" ]; then
		hostname="virbos"
	fi
	if testnetwork; then
		mesg "Network configured."
		return 0
	fi

	while true; do
		ask "Would you like to use a TUI to configure network connections, or would you like to do it manually using a shell?" tui,shell tui
		if [ "$answer" = "tui" ]; then
			nmtui
		elif [ "$answer" = "shell" ]; then
			writeln "Lead the way, captain!"
			$VIRBOSSETUP_SHELL || true
		fi
		if testnetwork; then break; fi
	done
	mesg "Network configured."
}

setup_disks() {
	writeln
	writeln "Disks available:"
	disklist
	for disk in $(getdisks | awk '{print $1}'); do
		[ -z "$disks" ] && disks="$disk"
		[ -z "$disks" ] || disks="$disks,$disk"
		defaultdisk="$disk"
	done
	ask "What disk would you like to install Virbos on?" "$disks" "$defaultdisk"
	disk="$answer"

	writeln "
You now have to decide between automatic and custom partitioning.
If you choose automatic partitioning, the installer will ERASE
ALL EXISTING DATA ON YOUR DISK so that it can allocate it all for Virbos.
If you choose custom partitioning, you get to create new partitions and
decide the partition layout."
	
	while true; do
		ask "Would you like to use use automatic partitioning, or custom partitioning?" automatic,custom automatic
		if [ "$answer" = "automatic" ]; then
			writeln "This WILL erase ALL DATA on your disk."
			writeln "If you agree and want to proceed, type 'I agree'."
			read -p "? [disagree] " automatic_confirmation
			if [ "$automatic_confirmation" = "I agree" ]; then
				partitionmethod="automatic"
				break
			else
				ewriteln "Aborting."
				continue
			fi
		elif [ "$answer" = "custom" ]; then
			ask "Would you like to use a TUI to configure partitions, or would you like to do it manually using a shell?" tui,shell tui
			if [ "$answer" = "tui" ]; then
				partition_tui
				break
			elif [ "$answer" = "shell" ]; then
				partition_shell
				break
			fi
		fi
	done
	mesg "Disks configured."
}

setup_users() {
	writeln
	read -p "Enter a username, or type 'no' to skip: [no] " user
	if [ -z "$user" ]; then
		user="no"
	fi
	if [ "$user" = "no" ]; then
		break
	fi
	while true; do
		read -sp "Enter a password for user '$user': " userpasswd_1
		writeln
		if [ -z "$userpasswd_1" ]; then
			continue
		fi
		read -sp "Enter it again: " userpasswd_2
		writeln
		if [ "$userpasswd_1" != "$userpasswd_2" ]; then
			ewriteln "Passwords do not match; please try again."
			continue
		fi
		userpasswd="$userpasswd_1"
		unset userpasswd_1
		unset userpasswd_2
		break
	done
	while true; do
		read -sp "Enter a password for the super user: " rootpasswd_1
		writeln
		if [ -z "$rootpasswd_1" ]; then
			continue
		fi
		read -sp "Enter it again: " rootpasswd_2
		writeln
		if [ "$rootpasswd_1" != "$rootpasswd_2" ]; then
			ewriteln "Passwords do not match; please try again."
			continue
		fi
		rootpasswd="$rootpasswd_1"
		unset rootpasswd_1
		unset rootpasswd_2
		break
	done
	mesg "Users configured."
}

# Begin

if [ "$(whoami)" != "root" ]; then
	panic "permission denied; please run as root"
fi

writeln "Welcome to virbos-setup!"
writeln "If you are unsure what to type, you can always type '?'"
writeln "(without the quotation marks) to get a list of available options."
writeln "The default answer for a question is always in square brackets."
writeln "If you wish to use that answer, you can press Enter."

setup_keymaps
setup_tzone
setup_network
setup_disks
setup_users
define_partitions
mount_partitions

# vi: ft=sh
